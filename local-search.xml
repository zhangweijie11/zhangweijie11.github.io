<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/02/28/hello-world/"/>
    <url>/2022/02/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用 Ettercap嗅探工具进行 DNS 欺骗实验</title>
    <link href="/2021/03/01/%E4%BD%BF%E7%94%A8%20Ettercap%E5%97%85%E6%8E%A2%E5%B7%A5%E5%85%B7%E8%BF%9B%E8%A1%8C%20DNS%20%E6%AC%BA%E9%AA%97%E5%AE%9E%E9%AA%8C/"/>
    <url>/2021/03/01/%E4%BD%BF%E7%94%A8%20Ettercap%E5%97%85%E6%8E%A2%E5%B7%A5%E5%85%B7%E8%BF%9B%E8%A1%8C%20DNS%20%E6%AC%BA%E9%AA%97%E5%AE%9E%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="使用-Ettercap嗅探工具进行-DNS-欺骗实验"><a href="#使用-Ettercap嗅探工具进行-DNS-欺骗实验" class="headerlink" title="使用 Ettercap嗅探工具进行 DNS 欺骗实验"></a>使用 Ettercap嗅探工具进行 DNS 欺骗实验</h1><blockquote><p>前提条件：需要安装<code>kali 虚拟机</code>，或者自己安装<code>ettercap 工具</code></p><p>涉及服务器：本地服务器（172.30.0.56）、kali 虚拟机（172.30.0.133）、网关（172.30.0.1，172.30.0.254）</p></blockquote><h2 id="一、实验名称"><a href="#一、实验名称" class="headerlink" title="一、实验名称"></a>一、实验名称</h2><p><strong>DNS欺骗</strong></p><h2 id="二、实验原理"><a href="#二、实验原理" class="headerlink" title="二、实验原理"></a>二、实验原理</h2><p>冒充域名服务器，将查询的 IP 地址设置为攻击者的 IP 地址，这样用户上网就只能看到攻击者主主页，而不是用户访问的真实的页面。</p><p><strong>正常情况</strong></p><p><img src="https://zwj-typora-ipic.oss-cn-beijing.aliyuncs.com/img/202202281509294.png" alt="image-20220228141758055"></p><p><strong>异常情况</strong></p><p><img src="https://zwj-typora-ipic.oss-cn-beijing.aliyuncs.com/img/202202281509975.png" alt="image-20220228141830850"></p><h2 id="三、实验步骤"><a href="#三、实验步骤" class="headerlink" title="三、实验步骤"></a>三、实验步骤</h2><h3 id="1、清除攻击机和靶机的-DNS-缓存数据"><a href="#1、清除攻击机和靶机的-DNS-缓存数据" class="headerlink" title="1、清除攻击机和靶机的 DNS 缓存数据"></a>1、清除攻击机和靶机的 DNS 缓存数据</h3><ul><li><p>MAC系统</p><figure class="highlight ebnf"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo killall -HUP mDNSResponder</span><br><span class="hljs-attribute">sudo dscacheutil -flushcache</span><br></code></pre></td></tr></table></figure></li><li><p>Windows 系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看 DNS 缓存内容</span><br>ipconfig/displaydns<br><span class="hljs-comment"># 清除 DNS 缓存内容</span><br>ifconfig /flushdns<br></code></pre></td></tr></table></figure></li><li><p>Linux 系统</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment"># Step 1. 查看 DNS 缓存状况</span><br>sudo systemd-<span class="hljs-built_in">resolve</span> <span class="hljs-comment">--statistics</span><br><br><span class="hljs-comment"># Step 2. 清除 DNS 缓存，systemd-resolve daemon 默认在所有的 Ubuntu 系统上运行</span><br>sudo systemd-<span class="hljs-built_in">resolve</span> <span class="hljs-comment">--flush-caches</span><br><br><span class="hljs-comment"># Step 3. 正在查看验证结果（SYSIN）</span><br>sudo systemd-<span class="hljs-built_in">resolve</span> <span class="hljs-comment">--statistics</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="2、修改相关-DNS-文件（攻击机）"><a href="#2、修改相关-DNS-文件（攻击机）" class="headerlink" title="2、修改相关 DNS 文件（攻击机）"></a>2、修改相关 DNS 文件（攻击机）</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 输入命令</span><br><span class="hljs-attribute">vim</span> /etc/ettercap/etter.dns<br><span class="hljs-comment"># 添加内容</span><br>*  A   <span class="hljs-number">172.30.0.133</span><br>*  PTR <span class="hljs-number">172.30.0.133</span><br></code></pre></td></tr></table></figure><h3 id="3、开启自带的-Apache-服务"><a href="#3、开启自带的-Apache-服务" class="headerlink" title="3、开启自带的 Apache 服务"></a>3、开启自带的 Apache 服务</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 开启服务</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">service </span>apache2 start<br><br><span class="hljs-comment"># 查询状态</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">service </span>apache2 status<br></code></pre></td></tr></table></figure><p><img src="https://zwj-typora-ipic.oss-cn-beijing.aliyuncs.com/img/202202281455623.png" alt="image-20220228145536734"></p><h3 id="4、开启-ettercap-图形界面"><a href="#4、开启-ettercap-图形界面" class="headerlink" title="4、开启 ettercap 图形界面"></a>4、开启 ettercap 图形界面</h3><ul><li><p>方式一</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ettercap -G</span><br></code></pre></td></tr></table></figure></li><li><p>方式二</p><p><img src="https://zwj-typora-ipic.oss-cn-beijing.aliyuncs.com/img/202202281432316.png" alt="image-20220228143217106"></p></li></ul><h3 id="5、选择网卡"><a href="#5、选择网卡" class="headerlink" title="5、选择网卡"></a>5、选择网卡</h3><p><img src="https://zwj-typora-ipic.oss-cn-beijing.aliyuncs.com/img/202202281433117.png" alt="image-20220228143315708"></p><h3 id="6、扫描网关下的所有存活主机"><a href="#6、扫描网关下的所有存活主机" class="headerlink" title="6、扫描网关下的所有存活主机"></a>6、扫描网关下的所有存活主机</h3><p><img src="https://zwj-typora-ipic.oss-cn-beijing.aliyuncs.com/img/202202281435479.png" alt="image-20220228143537655"></p><p><strong>扫描结果</strong></p><p><img src="https://zwj-typora-ipic.oss-cn-beijing.aliyuncs.com/img/202202281436063.png" alt="image-20220228143633113"></p><h3 id="7、选择攻击目标"><a href="#7、选择攻击目标" class="headerlink" title="7、选择攻击目标"></a>7、选择攻击目标</h3><p><img src="https://zwj-typora-ipic.oss-cn-beijing.aliyuncs.com/img/202202281438910.png" alt="image-20220228143810935"></p><h3 id="8、开启-ARP-投毒"><a href="#8、开启-ARP-投毒" class="headerlink" title="8、开启 ARP 投毒"></a>8、开启 ARP 投毒</h3><p><img src="https://zwj-typora-ipic.oss-cn-beijing.aliyuncs.com/img/202202281439827.png" alt="image-20220228143935749"></p><p><img src="https://zwj-typora-ipic.oss-cn-beijing.aliyuncs.com/img/202202281440789.png" alt="image-20220228143959644"></p><h3 id="9、使用插件开启-DNS-欺骗"><a href="#9、使用插件开启-DNS-欺骗" class="headerlink" title="9、使用插件开启 DNS 欺骗"></a>9、使用插件开启 DNS 欺骗</h3><p>Plugins –&gt; manage plugins –&gt; dns spoof</p><p><img src="https://zwj-typora-ipic.oss-cn-beijing.aliyuncs.com/img/202202281440797.png" alt="image-20220228144057221"></p><p><img src="https://zwj-typora-ipic.oss-cn-beijing.aliyuncs.com/img/202202281442111.png" alt="image-20220228144218575"></p><h3 id="10、验证结果"><a href="#10、验证结果" class="headerlink" title="10、验证结果"></a>10、验证结果</h3><p><strong>当发生 DNS 欺骗后，靶机请求的数据都会在 ettercap 工具中展示出来！</strong></p><p><img src="https://zwj-typora-ipic.oss-cn-beijing.aliyuncs.com/img/202202281451243.png" alt="image-20220228145135214"></p><p><strong>此时靶机再去请求数据时，页面就会显示我们预想的 Apache 的默认页面！</strong></p><p><img src="https://zwj-typora-ipic.oss-cn-beijing.aliyuncs.com/img/202202281456734.png" alt="image-20220228145652393"></p><p><img src="https://zwj-typora-ipic.oss-cn-beijing.aliyuncs.com/img/202202281457571.png" alt="image-20220228145726419"></p>]]></content>
    
    
    <categories>
      
      <category>安全研究</category>
      
      <category>域名知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DNS 欺骗</tag>
      
      <tag>安全工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web 指纹识别杂论</title>
    <link href="/2019/06/24/web%20%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E6%9D%82%E8%AE%BA/"/>
    <url>/2019/06/24/web%20%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E6%9D%82%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<p>##前言</p><p>在 web 渗透过程中，对目标网站的指纹识别非常关键，通过工具或者手工识别 CMS系统是自建的还是二次开发，还是直接使用公开的CMS 程序至关重要。通过获取的这些信息来决定后续渗透的思路和策略。CMS 指纹识别是渗透测试环节的一个非常重要的阶段，是信息收集的中的一个关键环节。</p><h2 id="1-指纹识别技术简介及思路"><a href="#1-指纹识别技术简介及思路" class="headerlink" title="1. 指纹识别技术简介及思路"></a>1. 指纹识别技术简介及思路</h2><h3 id="1-1-指纹识别技术"><a href="#1-1-指纹识别技术" class="headerlink" title="1.1 指纹识别技术"></a>1.1 指纹识别技术</h3><p>组件是网络空间最小的单元，Web应用程序、数据库、中间件等都属于组件。指纹是组件上能标识对象类型的一段特征信息，用来在渗透测试信息收集环节中快熟识别目标服务。互联网随时代的发展逐渐成熟，大批应用组件存在足以说明当前服务名称和版本的特征，识别这些特征获取当前服务信息，也表明该系统采用那个公司的产品，例如论坛常用 Discuz!来搭建，通过其 robots.txt 等可以识别网站程序是采用 Discuz！</p><h3 id="1-2-指纹识别思路"><a href="#1-2-指纹识别思路" class="headerlink" title="1.2 指纹识别思路"></a>1.2 指纹识别思路</h3><p>指纹识别可以铜鼓哦一些开源程序和小工具来进行扫描，也有可以结合文件头和反馈信息进行手工判断，指纹识别主要思路：</p><p>（1）使用工具自动判断</p><p>（2）手工对网站的关键字、版权信息、后台登录、程序版本、robots.txt 等常见固有文件进行识别、查找和比对，相同文件具有相同的 MD5 值和相同的属性。</p><h2 id="2-指纹识别方式"><a href="#2-指纹识别方式" class="headerlink" title="2.  指纹识别方式"></a>2.  指纹识别方式</h2><p>基于对指纹识别方式的各种套路和分析，可以分为以下几个类别：</p><h3 id="2-1-基于特殊文件的-MD5-值匹配"><a href="#2-1-基于特殊文件的-MD5-值匹配" class="headerlink" title="2.1 基于特殊文件的 MD5 值匹配"></a>2.1 基于特殊文件的 MD5 值匹配</h3><p>基于web网站独有的favicon.ico、css、logo.ico、js等文件的md5 比对网站类型，通过收集CMS公开代码中的独有文件，这些文件一般轻易不会更改，通过爬虫对这些文件进行抓取并比对md5值，如果一样，则认为该系统匹配。这种识别速度最快，但可能不准确，因为这些独有文件可能在部署到真实系统中会进行更改，那么就会造成很大的误差。</p><p>（1）robots.txt文件识别</p><p>相关厂商下的cms（内容管理系统）程序文件包含说明当前cms名称及版本的特征码，其中一些独有的文件夹以及名称都是识别cms的好方法，如Discuz官网下robots.txt文件。dedecms官网<a href="http://www.dedecms.com/robots.txt%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%EF%BC%9A">http://www.dedecms.com/robots.txt文件内容：</a></p><p>Disallow: &#x2F;plus&#x2F;feedback_js.php</p><p>Disallow: &#x2F;plus&#x2F;mytag_js.php</p><p>Disallow: &#x2F;plus&#x2F;rss.php</p><p>Disallow: &#x2F;plus&#x2F;search.php</p><p>Disallow: &#x2F;plus&#x2F;recommend.php</p><p>Disallow: &#x2F;plus&#x2F;stow.php</p><p>Disallow: &#x2F;plus&#x2F;count.php</p><p>看到这个基本可以判断为dedecms。</p><p>2）计算机md5值</p><p>计算网站所使中间件或cms目录下静态文件的md5值，md5码可以唯一地代表原信息的特征。静态文件包括html、js、css、image等，建立在站点静态文件存在的情况下访问，如 Dedecms 官网下网站根目录<a href="http://www.dedecms.com/img/buttom_logo.gif%E5%9B%BE%E7%89%87%E6%96%87%E4%BB%B6%EF%BC%8C%E7%9B%AE%E5%89%8D%E6%9C%89%E4%B8%80%E4%BA%9B%E5%85%AC%E5%BC%80%E7%A8%8B%E5%BA%8F%EF%BC%8C%E9%80%9A%E8%BF%87%E9%85%8D%E7%BD%AEcms.txt%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E7%9B%B8%E5%BA%94%E5%80%BC%E8%BF%9B%E8%A1%8C%E8%AF%86%E5%88%AB%EF%BC%8C%E5%A6%82%E5%9B%BE1%E6%89%80%E7%A4%BA%E3%80%82">http://www.dedecms.com/img/buttom_logo.gif图片文件，目前有一些公开程序，通过配置cms.txt文件中的相应值进行识别，如图1所示。</a></p><h3 id="2-2-请求相应主体内容或头信息的关键字匹配"><a href="#2-2-请求相应主体内容或头信息的关键字匹配" class="headerlink" title="2.2 请求相应主体内容或头信息的关键字匹配"></a>2.2 请求相应主体内容或头信息的关键字匹配</h3><p>请求响应主体内容或头信息的关键字匹配方法可以寻找网站的css 、js代码的命名规则，也可以找关键字，以及head cookie等等，但是弊端是收集这些规则会耗费很久的时间。</p><h3 id="2-3-基于-URL-关键字识别"><a href="#2-3-基于-URL-关键字识别" class="headerlink" title="2.3 基于 URL 关键字识别"></a>2.3 基于 URL 关键字识别</h3><p>基于爬虫爬出来的网站目录比对web信息，准确性比较高，但是如果改了目录结构就会造成问题，而且一部分网站有反爬虫机制，会造成一些困扰</p><h3 id="2-4-基于-TCP-x2F-IP-请求协议识别服务指纹"><a href="#2-4-基于-TCP-x2F-IP-请求协议识别服务指纹" class="headerlink" title="2.4 基于 TCP&#x2F;IP 请求协议识别服务指纹"></a>2.4 基于 TCP&#x2F;IP 请求协议识别服务指纹</h3><p> 一些应用程序、组建和数据库服务会有一些特殊的指纹，一般情况下不会进行更改。网络上的通信交互均通过TCP&#x2F;TP协议簇进行，操作系统也必须实现该协议。操作系统根据不同数据包做出不同反应。如Nmap检测操作系统工具通过向目标主机发送协议数据包并分析其响应信息进行操作系统指纹识别工作，其扫描命令为“nmap –O 192.168.1.1”。</p><h3 id="2-5-在owasp中识别Web应用框架测试方法"><a href="#2-5-在owasp中识别Web应用框架测试方法" class="headerlink" title="2.5 在owasp中识别Web应用框架测试方法"></a>2.5 在owasp中识别Web应用框架测试方法</h3><p>（1）http头。查看http响应报头的X-Powered-By字段来识别，可以通过netcat来识别，使用netcat 127.0.0.1 80对127.0.0.1主机的80端口web服务器框架进行识别。</p><p>（2）Cookies。一些框架有固定的Cookies名称，这些名称一般情况都不会更改，例如zope3、cakephp、kohanasesson、laravel_session。</p><p>（3）Html源代码。html源代码中包含注释、js、css等信息，通过访问这些信息来判断和确认cms系统框架。在源代码中常常会包含powered by、bulit upon、running等特征。</p><p>（4）特殊文件和文件夹</p>]]></content>
    
    
    <categories>
      
      <category>安全研究</category>
      
      <category>指纹识别</category>
      
    </categories>
    
    
    <tags>
      
      <tag>指纹识别</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
